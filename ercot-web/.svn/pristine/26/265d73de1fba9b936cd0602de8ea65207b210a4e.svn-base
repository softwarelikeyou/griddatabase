package com.softwarelikeyou.viewcontroller.dashboard;

import java.io.File;
import java.io.FileOutputStream;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import org.zkoss.zk.ui.event.Event;
import org.zkoss.zkplus.databind.AnnotateDataBinder;
import org.zkoss.zkplus.databind.BindingListModelList;
import org.zkoss.zul.Datebox;
import org.zkoss.zul.Filedownload;
import org.zkoss.zul.ListModelList;

import com.softwarelikeyou.I18NStrings;
import com.softwarelikeyou.exception.DailyException;
import com.softwarelikeyou.facade.RTSPPDailyFacade;
import com.softwarelikeyou.model.entity.Daily;
import com.softwarelikeyou.viewcontroller.WebUtil;

public class RTSPPDownloadPortlet extends DashboardPortlet {

	private static final long serialVersionUID = 1L;

	private BindingListModelList model = new BindingListModelList(new ArrayList<Daily>(), false);

	protected Datebox rtsppStartDatebox;
	protected Datebox rtsppEndDatebox;
	
	@Override
	protected String getPanelTitleI18NKey() {
		return I18NStrings.SETTLEMENT_POINT_PRICES;
	}

	@Override
	public void onCreate() {		
		super.onCreate();
	    binder = new AnnotateDataBinder(this);
	    binder.loadAll();
	    updateModel();
	}

	public ListModelList getModel() {
		return model;
	}
	
	protected void updateModel() {
		List<Daily> list = new ArrayList<Daily>();

		try {
    		Calendar calendar = Calendar.getInstance();
    		calendar.setTime(new Date());
    		calendar.add(Calendar.DATE, -1);
			for (Daily daily : RTSPPDailyFacade.findByBetweenDates(calendar.getTime(), calendar.getTime())) {
				if (daily.getName().startsWith("HB"))
					list.add(daily);
			}
		}
		catch (DailyException e) {
			showErrorBox(e, I18NStrings.COULD_NOT_RETRIEVE_LIST);
		}
		model.clear();
	    model.addAll(list);
	}
	
	public void onClick$rtsppDownload(Event event) {
		SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
		SimpleDateFormat dash = new SimpleDateFormat("MM-dd-yyyy");
		String fileName = "RTSPP" + dash.format(rtsppStartDatebox.getValue()) + "to" + dash.format(rtsppEndDatebox.getValue()) + ".csv";
		formatter = new SimpleDateFormat("MM-dd-yyyy hh:mm:ss aa");
		
	    DecimalFormat format = new DecimalFormat("###0.00");
		
		Calendar startCal = new GregorianCalendar();
		startCal.setTime(rtsppStartDatebox.getValue());
		startCal.set(Calendar.HOUR_OF_DAY, 0);
		startCal.set(Calendar.MINUTE, 0);
		startCal.set(Calendar.SECOND, 0);
		
		Calendar endCal = new GregorianCalendar();
		endCal.setTime(rtsppEndDatebox.getValue());
		endCal.set(Calendar.HOUR_OF_DAY, 23);
		endCal.set(Calendar.MINUTE, 59);
		endCal.set(Calendar.SECOND, 59);
		
		
		try {
			List<Daily> list = RTSPPDailyFacade.findByBetweenDates(startCal.getTime(), endCal.getTime());
			if (list == null)
				throw new DailyException(I18NStrings.COULD_NOT_RETRIEVE_LIST);
						
			StringBuffer rows = new StringBuffer();
			rows.append("Pricing, Date, Low, Avg, High, AvgChg" + "\n");
			
			for (Daily row : list) {
				rows.append(row.getName() + " [" + row.getType() + "]" + ",");
				rows.append(formatter.format(row.getIntervalDate()).toString() + ",");
				rows.append(format.format(row.getLow()) + ",");
				rows.append(format.format(row.getAverage()) + ",");
				rows.append(format.format(row.getHigh()) + ",");
				rows.append(format.format(row.getAverageChange()));
				rows.append("\n");
			}
			
			FileOutputStream fOut = new FileOutputStream(fileName);
			fOut.write(rows.toString().getBytes());
			fOut.flush();
			fOut.close();
			File file = new File(fileName);
			Filedownload.save(file, fileName);
		}
		catch (Exception e) {
			WebUtil.showErrorBox(true, e, I18NStrings.COULD_NOT_RETRIEVE_LIST);
		}
	}
}
